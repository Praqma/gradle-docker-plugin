apply plugin: 'eclipse'
apply plugin: 'groovy'

repositories {
	mavenLocal()
	jcenter()
}

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

dependencies {
	compile localGroovy()
	//compile "org.codehaus.groovy:groovy-all:${GroovySystem.version}:indy"
	compile gradleApi()

	compile 'com.github.docker-java:docker-java:0.10.3'
	//compile 'com.github.docker-java:docker-java:0.10.4-SNAPSHOT'
}

// Compile with invoke-dynamic. Needs jdk 7u60 or newer
/* tasks.withType(GroovyCompile) {
	groovyOptions.optimizationOptions.indy = true
}
*/

// Attache source for Groovy and Gradle
import org.gradle.plugins.ide.eclipse.model.*
import org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory

configurations { groovy }
dependencies{
	groovy group: 'org.codehaus.groovy' , name: 'groovy-all', version: GroovySystem.version
}
eclipse.classpath {
	downloadSources = true
	file {
		whenMerged { Classpath cp ->
			String gradleHome = gradle.getGradleHomeDir().absolutePath
			FileReferenceFactory fileRefFactory = new FileReferenceFactory()
			String gradleSrc = "${gradleHome}/src" // src doesn't exists for binary gradle distributions
			assert new File(gradleSrc).exists()
			cp.entries.findAll{  it instanceof Library && it.sourcePath == null}.each{ Library lib ->
				File jarFile = new File(lib.path)
				if (jarFile.path.startsWith(gradleHome)){
					switch (jarFile.name) {
						case { it.startsWith("gradle-") }:
							lib.sourcePath = fileRefFactory.fromPath(gradleSrc)
							break
						case "groovy-all-${GroovySystem.version}.jar":
							def componentIds = configurations.groovy.incoming.resolutionResult.allDependencies.collect { it.selected.id }
							def result = dependencies.createArtifactResolutionQuery()
									.forComponents(componentIds)
									.withArtifacts(JvmLibrary, SourcesArtifact)
									.execute()
							def resolvedComponent = singleElement(result.resolvedComponents)
							def src = singleElement(resolvedComponent.getArtifacts(SourcesArtifact)).file
							lib.sourcePath = fileRefFactory.fromFile(src)
							break
					}
				}
			}
		}
	}
}

def singleElement(Iterable collection) {
	def iter = collection.iterator()
	def answer = iter.next()
	assert !iter.hasNext()
	answer
}

